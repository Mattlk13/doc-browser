-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A documentation browser
--   
--   Please see the README on Github at
--   <a>https://github.com/qwfy/doc-browser#readme</a>
@package doc-browser
@version 0.4.0

module Match

-- | The search result
--   
--   Note: when converted to JSON, the "_" suffix in the field name will be
--   dropped.
data T
T :: Text -> Text -> Text -> Text -> Text -> Maybe Text -> Maybe Text -> Maybe Text -> T

-- | The entry's main content
[name] :: T -> Text

-- | The full documentation of this entry can be found at this URL
[url] :: T -> Text

-- | See <a>Collection</a>
[collection] :: T -> Text

-- | See <a>Version</a>
[version] :: T -> Text

-- | See <a>Vendor</a>
[vendor] :: T -> Text

-- | Hoogle only. The entry's package, without package version
[package_] :: T -> Maybe Text

-- | Hoogle only. The entry's module
[module_] :: T -> Maybe Text

-- | Hoogle only. The entry's type constraint
[typeConstraint] :: T -> Maybe Text
defClass :: IO (Class T)
instance Control.DeepSeq.NFData Match.T
instance GHC.Generics.Generic Match.T
instance GHC.Show.Show Match.T
instance GHC.Classes.Eq Match.T
instance Data.Aeson.Types.ToJSON.ToJSON Match.T

module Slot
data T
T :: TMVar Query -> TMVar String -> T
[query] :: T -> TMVar Query
[summon] :: T -> TMVar String
data Query
GuiQuery :: String -> Query
HttpQuery :: String -> (TMVar [T]) -> Query
empty :: STM T

module Utils
(|>) :: () => t1 -> (t1 -> t2) -> t2
infixl 0 |>
download :: String -> ExceptT String IO ByteString
downloadFile :: String -> Path a File -> ExceptT String IO ()
download' :: String -> IO ByteString
downloadFile' :: String -> Path a File -> IO ()
report :: [String] -> IO ()
updateTMVar :: TMVar a -> a -> STM ()
unpackXzInto :: Path a File -> Path a Dir -> IO ()
fireAndForget :: IO a -> IO ()
data DownloadError
DownloadError :: String -> String -> DownloadError
localTime :: IO String
uppercaseFirst :: String -> String
lowercaseFirst :: String -> String
paragraph :: [String] -> String
paragraphs :: [[String]] -> [String]
joinDir :: Path a Dir -> [Path Rel Dir] -> Path a Dir
hasExtension :: MonadThrow m => Path a File -> String -> m Bool
newtype ConfigRoot
ConfigRoot :: Path Abs Dir -> ConfigRoot
[getConfigRoot] :: ConfigRoot -> Path Abs Dir
newtype CacheRoot
CacheRoot :: Path Abs Dir -> CacheRoot
[getCacheRoot] :: CacheRoot -> Path Abs Dir
tryRemoveFile :: Path a File -> IO ()
extractAp :: (a -> b -> IO c) -> IO a -> b -> IO c
instance GHC.Show.Show Utils.DownloadError
instance GHC.Exception.Exception Utils.DownloadError

module Embeded
configYaml :: ByteString
extractUIDirInto :: Path a Dir -> IO ()

module Doc

-- | Vendor of a docset
data Vendor

-- | Docset provided by devdocs.io
DevDocs :: Vendor

-- | Docset provided by an archive, from which a Hoogle database can be
--   generated
Hoogle :: Vendor

-- | Collection of the entry
--   
--   For <a>DevDocs</a>, this is the language or library that this entry
--   belongs to.
--   
--   For <a>Hoogle</a>, this is the <tt>COLLECTION</tt> parameter in the
--   <tt>doc-browser --install-hoogle</tt> command.
data Collection
getCollection :: Collection -> String
parseCollection :: MonadThrow m => String -> m Collection
collection :: QuasiQuoter

-- | Version of the collection
--   
--   For <a>DevDocs</a>, this is the version of the language or the
--   library, e.g. the <tt>3.6.4</tt> as in <tt>Python 3.6.4</tt>, or the
--   <tt>1.13.0</tt> as in <tt>NumPy 1.13.0</tt>.
--   
--   For <a>Hoogle</a>, this is the version of the package as specified in
--   their cabal file.
newtype Version
Version :: String -> Version
[getVersion] :: Version -> String
combineCollectionVersion :: Collection -> Version -> String
breakCollectionVersion :: MonadThrow m => Path a Dir -> m (Collection, Version)
data InvalidCollection
instance GHC.Show.Show Doc.InvalidCollectionVersion
instance GHC.Classes.Ord Doc.Version
instance GHC.Classes.Eq Doc.Version
instance GHC.Show.Show Doc.InvalidCollection
instance Data.Data.Data Doc.Collection
instance GHC.Classes.Ord Doc.Collection
instance GHC.Classes.Eq Doc.Collection
instance GHC.Classes.Eq Doc.Vendor
instance GHC.Show.Show Doc.Vendor
instance GHC.Exception.Exception Doc.InvalidCollectionVersion
instance GHC.Exception.Exception Doc.InvalidCollection
instance GHC.Show.Show Doc.Collection
instance Data.Aeson.Types.FromJSON.FromJSON Doc.Collection

module Opt
data T
StartGUI :: Logging -> T
InstallDevDocs :: [Collection] -> T
InstallHoogle :: String -> Collection -> T
PrintPublicAPI :: T
PrintDefaultConfig :: T
get :: IO T
data Logging
NoLog :: Logging
Log :: Logging
instance GHC.Show.Show Opt.IsStartedOK
instance GHC.Show.Show Opt.T
instance GHC.Show.Show Opt.Logging

module Hoo
search :: ConfigRoot -> Collection -> Database -> Int -> String -> (String -> Text) -> [T]
findDatabase :: ConfigRoot -> IO (Maybe (Path Abs File))
findDatabases :: ConfigRoot -> IO ([Path Abs File])
install :: ConfigRoot -> CacheRoot -> String -> Collection -> IO ()
installFromDir :: Path Abs Dir -> IO ()

module Upgrade
start :: ConfigRoot -> Path a Dir -> IO Continue
data Continue
Continue :: Continue
Abort :: Continue
instance GHC.Show.Show Upgrade.UpgradeError
instance GHC.Exception.Exception Upgrade.UpgradeError

module Entry
data T
T :: Collection -> Version -> String -> FilePath -> ByteString -> T
[collection] :: T -> Collection
[version] :: T -> Version
[name] :: T -> String
[path] :: T -> FilePath
[nameLower] :: T -> ByteString
toMatch :: (String -> Text) -> T -> T
instance GHC.Classes.Eq Entry.T
instance GHC.Classes.Ord Entry.T

module DevDocsMeta
downloadMany :: ConfigRoot -> [Collection] -> IO ()
printTypeMap :: IO ()
typeMap :: Map Collection String
instance GHC.Generics.Generic DevDocsMeta.Meta
instance GHC.Show.Show DevDocsMeta.Meta
instance Data.Aeson.Types.FromJSON.FromJSON DevDocsMeta.Meta

module DevDocs
loadAll :: ConfigRoot -> IO [T]
getDocFile :: MonadThrow m => Collection -> Version -> Path Rel File -> m (Path Rel File)
instance GHC.Generics.Generic DevDocs.Index
instance GHC.Show.Show DevDocs.Index
instance Data.Aeson.Types.FromJSON.FromJSON DevDocs.IndexList
instance Data.Aeson.Types.FromJSON.FromJSON DevDocs.Index

module Config
data T
T :: Float -> Int -> Font -> Font -> Font -> Font -> Font -> Font -> Text -> Text -> Text -> Text -> Text -> Text -> T
[webEngineZoomFactor] :: T -> Float
[port] :: T -> Int
[inputFont] :: T -> Font
[matchFontMain] :: T -> Font
[matchFontMainHoogle] :: T -> Font
[matchFontMeta] :: T -> Font
[matchFontVersion] :: T -> Font
[matchFontShortcut] :: T -> Font
[matchBgColorNormal] :: T -> Text
[matchBgColorSelected] :: T -> Text
[matchFgColorNormal] :: T -> Text
[matchFgColorSelected] :: T -> Text
[matchFgColorLight] :: T -> Text
[inputBorderColor] :: T -> Text
data Font
Font :: Text -> Float -> Font
[family] :: Font -> Text
[pointSize] :: Font -> Float
load :: ConfigRoot -> IO T
instance GHC.Generics.Generic Config.T
instance GHC.Show.Show Config.T
instance GHC.Generics.Generic Config.Font
instance GHC.Show.Show Config.Font
instance Data.Aeson.Types.FromJSON.FromJSON Config.T
instance Data.Aeson.Types.ToJSON.ToJSON Config.T
instance Data.Aeson.Types.FromJSON.FromJSON Config.Font
instance Data.Aeson.Types.ToJSON.ToJSON Config.Font

module Style
createQml :: Path Abs Dir -> T -> IO ()

module Server
start :: Logging -> T -> ConfigRoot -> CacheRoot -> T -> IO ()
publicApiMarkdown :: String
instance Servant.Docs.Internal.ToParam Server.Q
instance Servant.Docs.Internal.ToSample ()
instance Servant.Docs.Internal.ToSample Match.T

module Search
search :: [T] -> Int -> GeneralQuery -> [T]
makeQuery :: String -> Maybe Query
startThread :: T -> ConfigRoot -> [T] -> Maybe (Path Abs File) -> T -> ([T] -> IO ()) -> IO ThreadId
queryToGoogle :: Query -> String
instance GHC.Show.Show Search.Query
instance GHC.Show.Show Search.HoogleQuery
instance GHC.Show.Show Search.GeneralQuery
